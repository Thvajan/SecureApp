Proj -> spring web + JPA + mysql Connector + security + ThymeLeaf

Create simple controller class with @Controller with a simple 
	@RequestMapping("/")
	public String home() {
		return "home";
	}
	
Create simple ThymeLeaf template in template folder under resources

Configure Spring.datasource properties in application.properties

Create user bean with @entity and config same in DB

Create SecurityConfiguration class extends WebSecurityConfigurerAdapter with @Configuration
	@EnableWebSecurity


Autowire UserDetailsService as a variable
org.springframework.security.core.userdetails.UserDetailsService

create AN authProvider method
	
	@Bean
	public AuthenticationProvider authProvider() {
		DaoAuthenticationProvider provider = new DaoAuthenticationProvider();
		provider.setUserDetailsService(userDetailsService);
		provider.setPasswordEncoder(NoOpPasswordEncoder.getInstance());
		return provider;

	}


Create UserRepository with JPA repository and declare findByUserName(String Username)

Create UserPrincipal implements UserDetails as a TO Object & set appropriate values

Set getAuthorities() method body as
	return Collections.singleton(new SimpleGrantedAuthority("USER"));

Create MyUserDetailsService implements UserDetailsService

	@Override
		public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
			User user = userRepository.findByUsername(username);
			if(user==null) {
				throw new UsernameNotFoundException("User Not Found");
			}
			return new UserPrincipal(user);
		}
		
Bcrypt - Uses multiple rounds of hashing. Better than SHA-256

	@Bean
	public AuthenticationProvider authProvider() {
		DaoAuthenticationProvider provider = new DaoAuthenticationProvider();
		provider.setUserDetailsService(userDetailsService);
		provider.setPasswordEncoder(new BCryptPasswordEncoder());
		return provider;

	}